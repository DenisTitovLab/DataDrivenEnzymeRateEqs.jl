var documenterSearchIndex = {"docs":
[{"location":"Tutorial/","page":"Tutorial","title":"Tutorial","text":"CurrentModule = DataDrivenEnzymeRateEqs","category":"page"},{"location":"Tutorial/#Tutorials-for-DataDrivenEnzymeRateEqs","page":"Tutorial","title":"Tutorials for DataDrivenEnzymeRateEqs","text":"","category":"section"},{"location":"Tutorial/","page":"Tutorial","title":"Tutorial","text":"This page contains several tutorials describing how to use DataDrivenEnzymeRateEqs.jl  ","category":"page"},{"location":"Tutorial/#Fit-user-provided-rate-equation-to-user-provided-data","page":"Tutorial","title":"Fit user provided rate equation to user provided data","text":"","category":"section"},{"location":"Tutorial/","page":"Tutorial","title":"Tutorial","text":"Work in progress...  ","category":"page"},{"location":"Tutorial/#Identify-Rate-Equation","page":"Tutorial","title":"Identify Rate Equation","text":"","category":"section"},{"location":"Tutorial/","page":"Tutorial","title":"Tutorial","text":"Work in progress...  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DataDrivenEnzymeRateEqs","category":"page"},{"location":"#DataDrivenEnzymeRateEqs","page":"Home","title":"DataDrivenEnzymeRateEqs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DataDrivenEnzymeRateEqs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This page provides an overview of DataDrivenEnzymeRateEqs.jl package.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Work in progress...  ","category":"page"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = DataDrivenEnzymeRateEqs","category":"page"},{"location":"API/#DataDrivenEnzymeRateEqs","page":"API","title":"DataDrivenEnzymeRateEqs","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"API for DataDrivenEnzymeRateEqs.","category":"page"},{"location":"API/","page":"API","title":"API","text":"","category":"page"},{"location":"API/","page":"API","title":"API","text":"Modules = [DataDrivenEnzymeRateEqs]\nPrivate = false","category":"page"},{"location":"API/#DataDrivenEnzymeRateEqs.data_driven_rate_equation_selection-Tuple{Function, DataFrames.DataFrame, Tuple{Symbol, Vararg{Symbol}}, Tuple{Symbol, Vararg{Symbol}}}","page":"API","title":"DataDrivenEnzymeRateEqs.data_driven_rate_equation_selection","text":"data_driven_rate_equation_selection(\n    general_rate_equation::Function,\n    data::DataFrame,\n    metab_names::Tuple{Symbol,Vararg{Symbol}},\n    param_names::Tuple{Symbol,Vararg{Symbol}};\n    range_number_params::Union{Nothing, Tuple{Int,Int}} = nothing,\n    forward_model_selection::Bool = true,\n    max_zero_alpha::Int = 1 + ceil(Int, length(metab_names) / 2),\n    n_reps_opt::Int = 20, \n    maxiter_opt::Int = 50_000,\n    model_selection_method::String = \"current_subsets_filtering\",\n    p_val_threshold::Float64 = 0.4,\n    save_train_results::Bool = false,\n    enzyme_name::String = \"Enzyme\",\n    subsets_min_limit::Int = 1, \n    subsets_max_limit::Union{Int, Nothing}=nothing,\n    subsets_filter_threshold::Float64=0.1,\n)\n\nThis function is used to perform data-driven rate equation selection using a general rate equation and data. \n\nThere are three model_selection methods:\n\ncurrentsubsetsfiltering: \n\nThis method iteratively fits models that are subsets of the top 10% from the previous iteration, saving the best model for each n params based on training loss. Optimal number of parameters are selected using  the Wilcoxon test on test scores from LOOCV, and the best equation is the best model with this optimal number.\n\ncvsubsetsfiltering:\n\nThis method implements currentsubsetsfiltering separately for each figure, leaving one figure out as a test set while training on the remaining data. For each number of parameters, it saves the test loss of the best subset for that figure. It uses the Wilcoxon test across all figures' results to select the optimal number of parameters.  Then, for the chosen number, it trains all subset with this n params on the entire dataset and selects the best rate equation based on minimal training loss.\n\ncvallsubsets: \n\nThis method fits all subsets for each figure, using the others as training data and the left-out figure as the test set. It selects the best model for each number of parameters and figure based on training error and computes LOOCV test scores.  The optimal n params is determined by the Wilcoxon test across all figures' test scores. The best equation is the subset with minimal training loss for this optimal n params when trained on the entire dataset.    \n\nArguments\n\ngeneral_rate_equation::Function: Function that takes a NamedTuple of metabolite concentrations (with metab_names keys) and parameters (with param_names keys) and returns an enzyme rate.\ndata::DataFrame: DataFrame containing the data with column Rate and columns for each metab_names where each row is one measurement. It also needs to have a column source that contains a string that identifies the source of the data. This is used to calculate the weights for each figure in the publication.\nmetab_names::Tuple: Tuple of metabolite names that correspond to the metabolites of rate_equation and column names in data.\nparam_names::Tuple: Tuple of parameter names that correspond to the parameters of rate_equation.\n\nKeyword Arguments\n\nsave_train_results::Bool: A boolean indicating whether to save the results of the training for each number of parameters as a csv file.\nenzyme_name::String: A string for enzyme name that is used to name the csv files that are saved.\nrange_number_params::Tuple{Int,Int}: A tuple of integers representing the range of the number of parameters of generalrateequation to search over.\nforward_model_selection::Bool: A boolean indicating whether to use forward model selection (true) or reverse model selection (false).\nmax_zero_alpha::Int: An integer representing the maximum number of alpha parameters that can be set to 0.\nn_reps_opt::Int n repetitions of optimization  \nmaxiter_opt::Int max iterations of optimization algorithm\nmodel_selection_method::String - which model selection to find best rate equation (default is currentsubsetsfiltering)\np_val_threshold::Float64 - pval threshold for Wilcoxon test\nsave_train_results::Bool: A boolean indicating whether to save the results of the training for each number of parameters as a csv file.\nenzyme_name::String: A string for enzyme name that is used to name the csv files that are saved.\nsubsets_min_limit::Int - The minimum number of filtered subsets (those with training loss within 10% of the minimum) \n\nthat must be kept for each number of parameters. These subsets are used to generate the subsets for the next iteration (only subsets of these are considered). Relevant to model selection methods currentsubsetsfiltering or cvsubsetsfiltering.\n\nsubsets_max_limit::Union{Int, Nothing} - The maximum number of filtered subsets (those with training loss within 10% of the minimum) \n\nthat must be kept for each number of parameters. These subsets are used to generate the subsets for the next iteration (only subsets of these are considered). Relevant to model selection methods currentsubsetsfiltering or cvsubsetsfiltering.\n\nsubsets_filter_threshold::Float64 - This sets the percentage limit for filtering subsets in each iteration.\n\nOnly the subsets with a training loss close to the best (within this percentage) are kept.  Relevant to model selection methods currentsubsetsfiltering or cvsubsetsfiltering.\n\nReturns\n\nNamedTuple: A named tuple with the following fields:\nresults: df with train and test results\nbest_n_params: optimal number of parameters\nbest_subset_row: row of the best rate equation selected - includes fitted params \n\n\n\n\n\n","category":"method"},{"location":"API/#DataDrivenEnzymeRateEqs.display_rate_equation-Tuple{Function, Tuple{Symbol, Vararg{Symbol}}, Tuple{Symbol, Vararg{Symbol}}}","page":"API","title":"DataDrivenEnzymeRateEqs.display_rate_equation","text":"display_rate_equation(\nrate_equation::Function,\nmetab_names::Tuple{Symbol,Vararg{Symbol}},\nparam_names::Tuple{Symbol,Vararg{Symbol}};\nnt_param_removal_code = nothing\n\n)\n\nReturn the symbolic rate equation for the given rate_equation function.\n\nArguments\n\nrate_equation::Function: The rate equation function.\nmetab_names::Tuple{Symbol,Vararg{Symbol}}: The names of the metabolites.\nparam_names::Tuple{Symbol,Vararg{Symbol}}: The names of the parameters.\nnt_param_removal_code::NamedTuple: The named tuple of the parameters to remove from the rate equation.\n\n\n\n\n\n","category":"method"},{"location":"API/#DataDrivenEnzymeRateEqs.fit_rate_equation-Tuple{Function, DataFrames.DataFrame, Tuple{Symbol, Vararg{Symbol}}, Tuple{Symbol, Vararg{Symbol}}}","page":"API","title":"DataDrivenEnzymeRateEqs.fit_rate_equation","text":"fit_rate_equation(\n    rate_equation::Function,\n    data::DataFrame,\n    metab_names::Tuple{Symbol, Vararg{Symbol}},\n    param_names::Tuple{Symbol, Vararg{Symbol}};\n    n_iter = 20\n\n)\n\nFit rate_equation to data and return loss and best fit parameters.\n\nArguments\n\nrate_equation::Function: Function that takes a NamedTuple of metabolite concentrations (with metab_names keys) and parameters (with param_names keys) and returns an enzyme rate.\ndata::DataFrame: DataFrame containing the data with column Rate and columns for each metab_names where each row is one measurement. It also needs to have a column source that contains a string that identifies the source of the data. This is used to calculate the weights for each figure in the publication.\nmetab_names::Tuple{Symbol, Vararg{Symbol}}: Tuple of metabolite names that correspond to the metabolites of rate_equation and column names in data.\nparam_names::Tuple{Symbol, Vararg{Symbol}}: Tuple of parameter names that correspond to the parameters of rate_equation.\nn_iter::Int: Number of iterations to run the fitting process.\n\nReturns\n\nloss::Float64: Loss of the best fit.\nparams::NamedTuple: Best fit parameters with param_names keys\n\nExample\n\nusing DataFrames\ndata = DataFrame(\n    Rate = [1.0, 2.0, 3.0],\n    A = [1.0, 2.0, 3.0],\n    source = [\"Figure 1\", \"Figure 1\", \"Figure 2\"]\n)\nrate_equation(metabs, params) = params.Vmax * metabs.S / (1 + metabs.S / params.K_S)\nfit_rate_equation(rate_equation, data, (:A,), (:Vmax, :K_S))\n\n\n\n\n\n","category":"method"},{"location":"API/#DataDrivenEnzymeRateEqs.@derive_general_mwc_rate_eq-Tuple{Any}","page":"API","title":"DataDrivenEnzymeRateEqs.@derive_general_mwc_rate_eq","text":"derive_general_mwc_rate_eq(metabs_and_regulators_kwargs...)\n\nDerive a function that calculates the rate of a reaction using the general MWC rate equation given the list of substrates, products, and regulators that bind to specific cat or reg sites.\n\nThe general MWC rate equation is given by:\n\nRate = fracV_max^a prod_i=1^n left(fracS_iK_a iright) - V_max rev^a prod_i=1^n left(fracP_iK_a iright) cdot Z_a cat^n-1 cdot Z_a reg^n + L left(V_max^i prod_i=1^n left(fracS_iK_i iright) - V_max rev^i prod_i=1^n left(fracP_iK_i iright)right) cdot Z_i cat^n-1 cdot Z_i reg^nZ_a cat^n cdot Z_a reg^n + L cdot Z_i cat^n cdot Z_i reg^n\n\nwhere:\n\nV_max^a is the maximum rate of the forward reaction\nV_max rev^a is the maximum rate of the reverse reaction\nV_max^i is the maximum rate of the forward reaction\nV_max rev^i is the maximum rate of the reverse reaction\nS_i is the concentration of the i^th substrate\nP_i is the concentration of the i^th product\nI_i is the concentration of the i^th catalytic site inhibitor\nR_i is the concentration of the i^th allosteric regulator\nK_a X is the binding constant of the X metabolite for active MWC state\nK_i X is the binding constant of the X metabolite for inactive MWC state\nZ_a cat is the allosteric factor for the catalytic site in the active MWC state\nZ_i cat is the allosteric factor for the catalytic site in the inactive MWC state\nZ_a reg is the allosteric factor for the regulatory site in the active MWC state\nZ_i reg is the allosteric factor for the regulatory site in the inactive MWC state\nL is the ratio of inactive to active enzyme conformations in the absence of ligands\nn is the oligomeric state of the enzyme\n\nArguments\n\nmetabs_and_regulators_kwargs...: keyword arguments that specify the substrates, products, catalytic sites, regulatory sites, and other parameters of the reaction.\n\nReturns\n\nA function that calculates the rate of the reaction using the general MWC rate equation\nA tuple of the names of the metabolites and parameters used in the rate equation\n\n\n\n\n\n","category":"macro"},{"location":"API/#DataDrivenEnzymeRateEqs.@derive_general_qssa_rate_eq-Tuple{Any}","page":"API","title":"DataDrivenEnzymeRateEqs.@derive_general_qssa_rate_eq","text":"derive_general_qssa_rate_eq(metabs_and_regulators_kwargs...)\n\nDerive a function that calculates the rate of a reaction using the Quasi Steady State Approximation (QSSA) given the list of substrates, products, and regulators.\n\nThe general QSSA rate equation is given by:\n\nRate = fracV_max left(fracprod_i=1^nS_i(K_S1Sn)^nright) - V_max rev left(fracprod_i=1^nP_i(K_P1Pn)^nright)Z\n\nwhere:\n\nV_max is the maximum rate of the forward reaction\nV_max rev is the maximum rate of the reverse reaction\nS_i, P_i, R_i is the concentration of the i^th substrate (S), product (P), or regulator (R)\nK_X_1X_n is the kinetic constant\nZ is a combination of all terms containing products of [S], [P], and [R] divided by KSP_R\n\nArguments\n\nmetabs_and_regulators_kwargs...: keyword arguments that specify the substrates, products, catalytic sites, regulatory sites, and other parameters of the reaction.\n\nReturns\n\nA function that calculates the rate of the reaction using the general qssa rate equation\nA tuple of the names of the metabolites and parameters used in the rate equation\n\n\n\n\n\n","category":"macro"}]
}
